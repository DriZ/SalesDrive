const $langToggleBtn = $("#langToggleBtn");
const $themeToggleBtn = $("#themeToggleBtn");
let currentLang = "ua";

const $hiddenFileInput = $("<input>", {
	type: "file",
	accept: ".json",
})
	.css({
		display: 'none',
	})
	.append("body");

async function getStorageArea() {
	try {
		await chrome.storage.sync.get(null);
		return chrome.storage.sync;
	} catch {
		console.warn("sync –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º local");
		return chrome.storage.local;
	}
}

$themeToggleBtn.on("click", () => {
	const $body = $("body")
	$body.toggleClass("dark-theme");
	const isDark = $body.hasClass("dark-theme");
	getStorageArea().then(storage => storage.set({ theme: isDark ? "dark" : "light" }));
	$body.attr("data-bs-theme", $body.hasClass("dark-theme") ? "dark" : "light");
});

const translations = {
	ua: {
		toggleKeysBtn: "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–ª—é—á—ñ ‚¨á",
		hideKeys: "–°—Ö–æ–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–ª—é—á—ñ ‚¨Ü",
		showMessageSuccess: "–ö–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
		showMessageError: "–ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á",
		langToggleBtn: "üá∑üá∫ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
		addApiKeyText: "–î–æ–¥–∞—Ç–∏ API-–∫–ª—é—á",
		saveBtn: "–ó–±–µ—Ä–µ–≥—Ç–∏",
		clearAllBtn: "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ",
		exportBtn: "üì§ –ï–∫—Å–ø–æ—Ä—Ç JSON",
		importBtn: "üì• –Ü–º–ø–æ—Ä—Ç JSON",
		keyNameText: "–ù–∞–∑–≤–∞ –∫–ª—é—á–∞",
		keyNamePlaceholder: "–í–≤–µ–¥—ñ—Ç—å –∑—Ä–æ–∑—É–º—ñ–ª–µ —ñ–º‚Äô—è –∫–ª—é—á–∞",
		formIdPlaceholder: "–ó–∞–ø–æ–≤–Ω–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ",
		previewText: "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—é—á—ñ–≤:",
		selectAllBtn: "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ",
		deselectAllBtn: "–ó–Ω—è—Ç–∏ –≤—Å—ñ",
		confirmImportBtn: "–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ",
		cancelImportBtn: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏",
		themeToggleBtn: "üåô –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
		invalidKey: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á",
		errWhileExtractKey: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–æ–±—É—Ç—Ç—ñ formId",
		succKeySaved: "–ö–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
		allKeysCleared: "–í—Å—ñ –∫–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω—ñ.",
		selectJsonFile: "–í–∏–±–µ—Ä—ñ—Ç—å JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç—É.",
		errWhileReadJson: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ JSON-—Ñ–∞–π–ª—É.",
		edit: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
		editKey: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—é—á",
		delete: "–í–∏–¥–∞–ª–∏—Ç–∏",
		deleteKey: "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á",
		enterValidKey: "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –∫–ª—é—á (100 —Å–∏–º–≤–æ–ª—ñ–≤).",
		importedKeysSaved: "–û–±—Ä–∞–Ω—ñ –∫–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ.",
		exportKeysSuccess: "–ö–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ",
		removeAllApiKeys: "–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ API –∫–ª—é—á—ñ?",
		actionCantBeUndone: "–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
		fillAllRows: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è",
		file2Large: "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º—É–º 2 MB",
		fileLoaded: "–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º",
		incorrectStruct: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ apiKeys",
		exists: "–í–∂–µ —î",
		beUpdated: "–ë—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ",
		new: "–ù–æ–≤–∏–π",
		editNameText: "–ù–∞–∑–≤–∞ –∫–ª—é—á–∞",
		cancel: "–í—ñ–¥–º—ñ–Ω–∞",
	},
	ru: {
		toggleKeysBtn: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨á",
		hideKeys: "–°–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨Ü",
		showMessageSuccess: "–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
		showMessageError: "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á",
		langToggleBtn: "üá∫üá¶ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
		addApiKeyText: "–î–æ–±–∞–≤–∏—Ç—å API-–∫–ª—é—á",
		saveBtn: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
		clearAllBtn: "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏",
		exportBtn: "üì§ –≠–∫—Å–ø–æ—Ä—Ç JSON",
		importBtn: "üì• –ò–º–ø–æ—Ä—Ç JSON",
		keyNameText: "–ò–º—è –∫–ª—é—á–∞",
		keyNamePlaceholder: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –∫–ª—é—á–∞",
		formIdPlaceholder: "–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
		previewText: "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π:",
		selectAllBtn: "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
		deselectAllBtn: "–°–Ω—è—Ç—å –≤—Å–µ",
		confirmImportBtn: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
		cancelImportBtn: "–û—Ç–º–µ–Ω–∞",
		themeToggleBtn: "üåô –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
		invalidKey: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á",
		errWhileExtractKey: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ formId",
		succKeySaved: "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
		allKeysCleared: "–í—Å–µ –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
		selectJsonFile: "–í—ã–±–µ—Ä–∏—Ç–µ JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.",
		errWhileReadJson: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞.",
		edit: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
		editKey: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á",
		delete: "–£–¥–∞–ª–∏—Ç—å",
		deleteKey: "–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
		enterValidKey: "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á (100 —Å–∏–º–≤–æ–ª–æ–≤).",
		importedKeysSaved: "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.",
		exportKeysSuccess: "–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
		removeAllApiKeys: "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏?",
		actionCantBeUndone: "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
		fillAllRows: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
		file2Large: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 2 MB",
		fileLoaded: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º",
		incorrectStruct: "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ apiKeys",
		exists: "–£–∂–µ –µ—Å—Ç—å",
		beUpdated: "–ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
		new: "–ù–æ–≤—ã–π",
		editNameText: "–ò–º—è –∫–ª—é—á–∞",
		cancel: "–û—Ç–º–µ–Ω–∞",
	}
};

function updateLanguage() {
	const t = translations[currentLang];

	for (let key in t) {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ placeholder
		if (key.endsWith("Placeholder")) {
			const inputId = key.replace("Placeholder", "");
			const $inputEl = $(`#${inputId}`);
			if ($inputEl.length) $inputEl.attr("placeholder", t[key]);
			continue;
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		const $el = $(`#${key}`);
		if ($el.length) $el.text(t[key]);
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º toggleKeysBtn –ø–æ –∫–ª–∞—Å—Å—É
	const $toggleBtn = $("#toggleKeysBtn");
	if ($toggleBtn.length) {
		const isHidden = $toggleBtn.hasClass("hide");
		$toggleBtn.text(isHidden ? t.toggleKeysBtn : t.hideKeys);
	}
}

$langToggleBtn.on("click", () => {
	currentLang = currentLang === "ua" ? "ru" : "ua";
	getStorageArea().then(storage => storage.set({ selectedLang: currentLang }))
	updateLanguage();
});

function showStatusMessage(message, type = 'info', duration = 5000) {
	const $box  = $('#statusMessage');
	const $icon = $('#statusIcon');
	const $text = $('#statusText');

	const icons = {
		success: '‚úÖ',
		error:   '‚ùå',
		info:    '‚ÑπÔ∏è',
		warning: '‚ö†Ô∏è'
	};

	// –¢–µ–∫—Å—Ç –∏ –∏–∫–æ–Ω–∫–∞
	$text.text(message);
	$icon.text(icons[type] || icons.info);

	// –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å—ã
	$box
		.removeClass('status--success status--error status--info status--warning')
		.addClass(`status--${type}`);

	// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ç–∞–π–º–µ—Ä
	$box.stop(true, true).fadeIn(150);
	const prevTimer = $box.data('hideTimer');
	if (prevTimer) clearTimeout(prevTimer);

	// –ê–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ
	const hideTimer = setTimeout(() => {
		$box.fadeOut(300);
	}, duration);

	$box.data('hideTimer', hideTimer);
}

// –ü–æ –∂–µ–ª–∞–Ω–∏—é: –∫–ª–∏–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é ‚Äî —Å—Ä–∞–∑—É —Å–∫—Ä—ã—Ç—å
$(document).on('click', '#statusMessage', function () {
	const $box = $(this);
	const t = $box.data('hideTimer');
	if (t) clearTimeout(t);
	$box.stop(true, true).fadeOut(150);
});

async function editKey(id) {
	const storage = await getStorageArea();
	const { apiKeys = {} } = await storage.get({ apiKeys: {} });
	const current = apiKeys[id];

	showModal({
		title: `${translations[currentLang].editKey} ¬´${current.name}¬ª`,
		bodyHTML: $('#editForm').prop("outerHTML"),
		okLabel: translations[currentLang].saveBtn,
		onConfirm: async () => {
			const $form = $('#editForm');
			const name = $form.find('#editName').val().trim();
			const key = $form.find('#editValue').val().trim();

			if (!name || !key) return; // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å alert –∏–ª–∏ shake effect

			apiKeys[id] = { name, key };
			await storage.set({ apiKeys });
			renderKeys(apiKeys);
		}
	});

	// –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ—Å–ª–µ .show)
	setTimeout(() => {
		const $form = $('#editForm');
		if ($form.length) {
			$form.removeClass('d-none');
			$form.find('#editName').val(current.name);
			$form.find('#editValue').val(current.key);
		}
	}, 50);
}

// –ù–µ–±–æ–ª—å—à–æ–π —ç—Å–∫–µ–π–ø, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ HTML
function escapeHtml(str = '') {
	return String(str)
		.replaceAll('&', '&amp;')
		.replaceAll('<', '&lt;')
		.replaceAll('>', '&gt;')
		.replaceAll('"', '&quot;')
		.replaceAll("'", '&#39;');
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞
 * options: { title, bodyHTML, okLabel, okClass, onConfirm, onCancel }
 */
function showModal({ title, bodyHTML, okLabel = '–û–ö', okClass = 'btn-primary', onConfirm, onCancel }) {
	const $modalEl = $('#confirmModal');
	const modalEl = $modalEl[0];
	const bsModal = bootstrap.Modal.getOrCreateInstance(modalEl);

	// –¢–µ–º–∏–∑–∞—Ü–∏—è
	modalEl.setAttribute(
		'data-bs-theme',
		$('body').hasClass('dark-theme') ? 'dark' : 'light'
	);

	$modalEl.find('.modal-title').text(title);
	$modalEl.find('.modal-body').html(bodyHTML);

	const $okBtn = $modalEl.find('#confirmModalOk');
	$okBtn.text(okLabel).attr('class', `btn ${okClass}`);

	const onOk = function () {
		cleanup();
		bsModal.hide();
		if (typeof onConfirm === 'function') onConfirm();
	};
	const onHide = function () {
		cleanup();
		if (typeof onCancel === 'function') onCancel();
	};
	const onKey = function (e) {
		if (e.key === 'Enter') {
			e.preventDefault();
			onOk();
		}
		if (e.key === 'Escape') {
			e.preventDefault();
			cleanup();
			bsModal.hide();
		}
	};
	const cleanup = function () {
		$okBtn.off('click', onOk);
		$modalEl.off('hidden.bs.modal', onHide);
		$modalEl.off('keydown', onKey);
	};

	$okBtn.one('click', onOk);
	$modalEl.one('hidden.bs.modal', onHide);
	$modalEl.on('keydown', onKey);

	bsModal.show();
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 * options: { title, message, okLabel, okVariant } // okVariant: 'danger' | 'primary' | ...
 */
function confirmModal({ title = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', message, okLabel = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', okVariant = 'primary' } = {}) {
	return new Promise((resolve) => {
		showModal({
			title,
			bodyHTML: `<p class="mb-0">${escapeHtml(message)}</p>`,
			okLabel,
			okClass: `btn-${okVariant}`,
			onConfirm: () => resolve(true),
			onCancel: () => resolve(false),
		});
	});
}

async function deleteKey(id, label) {
	const confirmed = await confirmModal({
		title: translations[currentLang].deleteKey,
		message: `${translations[currentLang].deleteKey} ¬´${label || id}¬ª? ${translations[currentLang].actionCantBeUndone}`,
		okLabel: translations[currentLang].delete,
		okVariant: 'danger'
	});
	if (!confirmed) return;

	const storage = await getStorageArea();
	const { apiKeys = {} } = await storage.get({ apiKeys: {} });
	if (!(id in apiKeys)) return; // —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

	delete apiKeys[id];

	await storage.set({ apiKeys });
	renderKeys(apiKeys);
}


function renderKeys(apiKeys = null) {
	getStorageArea().then(storage => {
		const $list = $("#keysList");
		$list.empty();

		const showKeys = (data) => {
			const keys = apiKeys ?? data?.apiKeys ?? {};
			const ids = Object.keys(keys);

			if (ids.length === 0) {
				$list.append($("<div>").addClass("text-muted").text("–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π"));
				return;
			}

			$.each(keys, (id, { name = "–ë–µ–∑ –∏–º–µ–Ω–∏", key = "" }) => {
				const $item = $("<div>")
					.addClass("key-item d-flex align-items-center justify-content-between")
					.css("gap", "12px");

				const $infoBlock = $("<div>").append(
					$("<strong>").text(name),
					$("<small>").text(` (formId ${id})`),
					$("<br>"),
					$("<span>").append($("<code>").text(key.slice(0, 18) + "***"))
				);

				const $actionsBlock = $("<div>")
					.addClass("d-flex")
					.css("gap", "6px");

				const $editBtn = $("<button>")
					.addClass("btn btn-outline-secondary editBtn")
					.attr("title", translations?.[currentLang]?.edit ?? "Edit")
					.html('<i class="fa fa-pen"></i>')
					.on("click", () => editKey(id));

				const $deleteBtn = $("<button>")
					.addClass("btn btn-outline-danger deleteBtn")
					.attr("title", translations?.[currentLang]?.delete ?? "Delete")
					.html('<i class="fa fa-trash"></i>')
					.on("click", () => deleteKey(id, name));

				$actionsBlock.append($editBtn, $deleteBtn);
				$item.append($infoBlock, $actionsBlock);
				$list.append($item);
			});
		};

		if (apiKeys) {
			showKeys({ apiKeys });
		} else {
			storage.get({ apiKeys: {} }).then(showKeys);
		}
	});
}


$(() => {
	getStorageArea().then(storage => {
		storage.get(["selectedLang", "theme"], (result) => {
			currentLang = result.selectedLang || (navigator.language.startsWith("uk") ? "ua" : "ru");
			if (result.theme === "dark") $("body").addClass("dark-theme");
			updateLanguage();
		});
	});

	const $formIdEl = $("#formId");
	const $apiKeyEl = $("#apiKey");
	const $keyNameEl = $("#keyName");

	let apiKeyTimer = null;

	$apiKeyEl.on("input", function () {
		clearTimeout(apiKeyTimer);
		const apiKey = $(this).val().trim();

		if (apiKey.length === 0) $(this).removeClass("is-invalid");
		else if ((apiKey.length > 0 && apiKey.length < 100) || apiKey.length > 100) $(this).addClass("is-invalid");
		else if (apiKey.length === 100) {
			apiKeyTimer = setTimeout(async function () {
				const formId = await extractFormInfo(apiKey);
				if (formId) {
					$formIdEl.val(formId);
					$(this).removeClass("is-invalid").addClass("is-valid");
					updateSaveButtonState();
					$keyNameEl.trigger("focus");
				} else {
					$formIdEl.val("");
					updateSaveButtonState();
				}
			}, 600); // –∑–∞–¥–µ—Ä–∂–∫–∞ 600 –º—Å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
		}
	});

	async function extractFormInfo(apiKey) {
		try {
			const response = await fetch("https://kompikok.salesdrive.me/api/order/list/?limit=1", {
				method: "GET",
				headers: {
					"Form-Api-Key": apiKey
				}
			});

			if (!response.ok) throw new Error(translations[currentLang].invalidKey);

			const linkHeader = response.headers.get("Link");
			if (!linkHeader) throw new Error(translations[currentLang].invalidKey);

			const matchFormId = linkHeader.match(/formId=([^&]+)/);
			return matchFormId?.[1] || null;
		} catch (e) {
			showStatusMessage(`${translations[currentLang].errWhileExtractKey}: ${e.message}`, "error")
			return null;
		}
	}

	function updateSaveButtonState() {
		const formIdFilled = $formIdEl.val().trim() !== "";
		const keyNameFilled = ($keyNameEl.val().trim() !== "" && $keyNameEl.val().trim().length > 2);
		$saveBtn.prop("disabled", !(formIdFilled && keyNameFilled));
	}

	$keyNameEl.on("input", function () {
		const keyName = $(this).val().trim();
		const isInvalid = keyName.length < 3;

		$(this)
			.toggleClass("is-invalid", isInvalid)
			.toggleClass("is-valid", !isInvalid);

		updateSaveButtonState();
	});

	const $keysList = $("#keysList");

	const $toggleKeysBtn = $("#toggleKeysBtn");
	$toggleKeysBtn.on("click", function () {
		const isVisible = $keysList.css("maxHeight") !== "0px";

		if (isVisible) {
			$keysList.css({
				maxHeight: "0px",
				opacity: "0"
			});
			$toggleKeysBtn.text("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨á");
			$toggleKeysBtn.removeClass("show").addClass("hide");
		} else {
			$keysList.css({
				maxHeight: $keysList.prop("scrollHeight") + "px",
				opacity: "1"
			});
			console.log($keysList.prop('scrollHeight')); // > 0?
			$toggleKeysBtn.text("–°–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨Ü");
			$toggleKeysBtn.removeClass("hide").addClass("show");
		}

		const isHidden = $toggleKeysBtn.hasClass("hide");
		$toggleKeysBtn.toggleClass("hide show");
		$toggleKeysBtn.text(!isHidden ? translations[currentLang].hideKeys : translations[currentLang].toggleKeysBtn);

		// $keysList.toggleClass("open");
	});

	$langToggleBtn.on("click", () => {
		$(".editBtn").attr("title", translations[currentLang].edit);
		$(".deleteBtn").attr("title", translations[currentLang].delete);
	});

	$keyNameEl.on("keydown", (e) => {
		if (e.key === "Enter" && !$saveBtn.prop("disabled")) {
			e.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
			$saveBtn.trigger("click");    // –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
		}
	});

	const $saveBtn = $("#saveBtn");
	$saveBtn.on("click", function () {
		const formId = $formIdEl.val().trim();
		const apiKey = $apiKeyEl.val().trim();
		const keyName = $keyNameEl.val().trim();

		if (!formId || !apiKey || !keyName) {
			showStatusMessage(translations[currentLang].fillAllRows, "warning");
			return
		}

		getStorageArea().then(storage => {
			storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
				apiKeys[formId] = { name: keyName, key: apiKey };
				storage.set({ apiKeys }).then(() => {
					$("#apiKey, #keyName").val("");
					$('#formId')
						.prop('readonly', false)
						.val('')
						.addClass('cleared') // –î–æ–±–∞–≤–∏–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
						.prop('readonly', true);
					renderKeys(apiKeys);
				})
			});
		});

		showStatusMessage(translations[currentLang].succKeySaved, "success")
		$apiKeyEl.trigger("focus");
	});

	$("#clearAllBtn").on("click", () => {
		if (!confirm(translations[currentLang].removeAllApiKeys)) return;
		getStorageArea().then(storage => storage.set({ apiKeys: {} }).then(() => renderKeys({})));
		showStatusMessage(translations[currentLang].allKeysCleared, "success")
	});

	$("#exportBtn").on("click", () => {
		getStorageArea().then(storage => {
			storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
				const blob = new Blob([JSON.stringify(apiKeys, null, 2)], { type: "application/json" });
				const url = URL.createObjectURL(blob);
				$("<a>", {
					href: url,
					download: "apiKeys.json"
				})[0].click();
				URL.revokeObjectURL(url);
				showStatusMessage(translations[currentLang].exportKeysSuccess, "success")
			});
		});
	});

	$("#importBtn").on("click", () => {
		$hiddenFileInput.trigger("click");
	});

	function isValidApiKeys(obj) {
		if (obj === null || typeof obj !== 'object' || Array.isArray(obj)) return false;
		return Object.keys(obj).every((k) => {
			const v = obj[k];
			return typeof v === 'string' || (v && typeof v === 'object' && typeof v.key === 'string');
		});
	}

	$hiddenFileInput.on('change', (event) => {
		const file = event.target?.files[0];
		if (!file) return;

		const isJsonByName = /\.json$/i.test(file.name);
		const isJsonByType = file.type === 'application/json' || file.type === '';
		const MAX_SIZE = 2 * 1024 * 1024; // 2 MB

		if (!isJsonByName && !isJsonByType) {
			showStatusMessage(translations[currentLang].selectJsonFile, 'error');
			this.value = '';
			return;
		}
		if (file.size > MAX_SIZE) {
			showStatusMessage(translations[currentLang].file2Large, 'error');
			this.value = '';
			return;
		}

		const reader = new FileReader();
		reader.onload = (ev) => {
			try {
				const parsed = JSON.parse(ev.target.result);

				if (!isValidApiKeys(parsed)) throw new Error(translations[currentLang].incorrectStruct);

				showPreview(parsed); // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
				showStatusMessage(translations[currentLang].fileLoaded, 'info');
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', err);
				showStatusMessage(translations[currentLang].errWhileReadJson, 'error');
			} finally {
				$hiddenFileInput.val('');
			}
		};
		reader.readAsText(file);
	});

	renderKeys();

	let previewData = null;

	function showPreview(importedKeys) {
		getStorageArea().then(storage => {
			storage.get({ apiKeys: {} }).then(({ apiKeys: existingKeys }) => {
				const $container = $("#previewContainer");
				const $list = $("#previewList");
				$list.empty();

				previewData = { importedKeys, existingKeys };

				for (const [id, { name, key }] of Object.entries(importedKeys)) {
					const exists = existingKeys[id];
					const isSame = exists && exists.key === key && exists.name === name;

					const label = exists
						? isSame
							? translations[currentLang].exists
							: translations[currentLang].beUpdated
						: translations[currentLang].new;

					const $row = $("<div>", {
						class: "form-check form-switch",
						css: {
							display: "flex",
							alignItems: "left",
							marginBottom: "6px",
							gap: "8px"
						}
					});

					const $checkbox = $("<input>", {
						class: "form-check-input",
						type: "checkbox",
						role: "switch",
						checked: true,
					}).attr("data-id", id);

					const $text = $("<div>").html(`<strong>${name}</strong> <small>(formId ${id})</small>:<br /> <code>${key.slice(0, 18)}</code> <span style="color:gray;">${label}</span>`);
					$row.append($checkbox).append($text);
					$list.append($row);
				}

				$container.show()
			});
		});
	}

	$("#confirmImportBtn").on("click", () => {
		if (!previewData) return;

		const { importedKeys, existingKeys } = previewData;
		const selected = {};

		$("#previewList input[type=checkbox]:checked").each(function () {
			const id = $(this).attr("data-id");
			selected[id] = importedKeys[id];
		});

		const merged = $.extend({}, existingKeys, selected);
		const $btn = $(this).prop("disabled", true);

		getStorageArea().then(storage => {
			storage.set({ apiKeys: merged }).then(() => {
				renderKeys(merged);
				$("#previewContainer").hide();
				previewData = null;
				showStatusMessage(translations[currentLang].importedKeysSaved, "success");
			}).finally(() => {
				$btn.prop("disabled", false);
			});
		});
	});

	$(document).on("click", "#selectAllBtn", () => {
		$("#previewList input[type=checkbox]").prop("checked", true)
	});

	$(document).on("click", "#deselectAllBtn", () => {
		$("#previewList input[type=checkbox]").prop("checked", false)
	});

	$(document).on("click", "#cancelImportBtn", () => {
		$("#previewContainer").hide();
		previewData = null;
	});
})
