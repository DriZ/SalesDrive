const langToggleBtn = document.getElementById("langToggleBtn");
const themeToggleBtn = document.getElementById("themeToggleBtn");
let currentLang = "ua";

const hiddenFileInput = document.createElement('input');
hiddenFileInput.type = 'file';
hiddenFileInput.accept = '.json';
hiddenFileInput.style.display = 'none';
document.body.appendChild(hiddenFileInput);

async function getStorageArea() {
	try {
		await chrome.storage.sync.get(null);
		return chrome.storage.sync;
	} catch {
		console.warn("sync –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º local");
		return chrome.storage.local;
	}
}

themeToggleBtn.addEventListener("click", () => {
	document.body.classList.toggle("dark-theme");
	const isDark = document.body.classList.contains("dark-theme");
	getStorageArea().then(storage => storage.set({ theme: isDark ? "dark" : "light" }));
});

const translations = {
	ua: {
		toggleKeysBtn: "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–ª—é—á—ñ ‚¨á",
		hideKeys: "–°—Ö–æ–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–ª—é—á—ñ ‚¨Ü",
		showMessageSuccess: "–ö–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
		showMessageError: "–ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á",
		langToggleBtn: "üá∑üá∫ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
		addApiKeyText: "–î–æ–¥–∞—Ç–∏ API-–∫–ª—é—á",
		saveBtn: "–ó–±–µ—Ä–µ–≥—Ç–∏",
		clearAllBtn: "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ",
		exportBtn: "üì§ –ï–∫—Å–ø–æ—Ä—Ç JSON",
		importBtn: "üì• –Ü–º–ø–æ—Ä—Ç JSON",
		keyNameText: "–ù–∞–∑–≤–∞ –∫–ª—é—á–∞",
		keyNamePlaceholder: "–í–≤–µ–¥—ñ—Ç—å –∑—Ä–æ–∑—É–º—ñ–ª–µ —ñ–º‚Äô—è –∫–ª—é—á–∞",
		formIdPlaceholder: "–ó–∞–ø–æ–≤–Ω–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ",
		previewText: "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—é—á—ñ–≤:",
		selectAllBtn: "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ",
		deselectAllBtn: "–ó–Ω—è—Ç–∏ –≤—Å—ñ",
		confirmImportBtn: "–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ",
		cancelImportBtn: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏",
		themeToggleBtn: "üåô –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
		invalidKey: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á",
		errWhileExtractKey: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–æ–±—É—Ç—Ç—ñ formId",
		succKeySaved: "–ö–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
		allKeysCleared: "–í—Å—ñ –∫–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω—ñ.",
		selectJsonFile: "–í–∏–±–µ—Ä—ñ—Ç—å JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç—É.",
		errWhileReadJson: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ JSON-—Ñ–∞–π–ª—É.",
		edit: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
		delete: "–í–∏–¥–∞–ª–∏—Ç–∏",
		enterValidKey: "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –∫–ª—é—á (100 —Å–∏–º–≤–æ–ª—ñ–≤).",
		importedKeysSaved: "–û–±—Ä–∞–Ω—ñ –∫–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ.",
	},
	ru: {
		toggleKeysBtn: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨á",
		hideKeys: "–°–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨Ü",
		showMessageSuccess: "–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
		showMessageError: "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á",
		langToggleBtn: "üá∫üá¶ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
		addApiKeyText: "–î–æ–±–∞–≤–∏—Ç—å API-–∫–ª—é—á",
		saveBtn: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
		clearAllBtn: "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏",
		exportBtn: "üì§ –≠–∫—Å–ø–æ—Ä—Ç JSON",
		importBtn: "üì• –ò–º–ø–æ—Ä—Ç JSON",
		keyNameText: "–ò–º—è –∫–ª—é—á–∞",
		keyNamePlaceholder: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –∫–ª—é—á–∞",
		formIdPlaceholder: "–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
		previewText: "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π:",
		selectAllBtn: "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
		deselectAllBtn: "–°–Ω—è—Ç—å –≤—Å–µ",
		confirmImportBtn: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
		cancelImportBtn: "–û—Ç–º–µ–Ω–∞",
		themeToggleBtn: "üåô –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
		invalidKey: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á",
		errWhileExtractKey: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ formId",
		succKeySaved: "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
		allKeysCleared: "–í—Å–µ –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
		selectJsonFile: "–í—ã–±–µ—Ä–∏—Ç–µ JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.",
		errWhileReadJson: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞.",
		edit: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
		delete: "–£–¥–∞–ª–∏—Ç—å",
		enterValidKey: "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á (100 —Å–∏–º–≤–æ–ª–æ–≤).",
		importedKeysSaved: "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.",
	}
};

function updateLanguage() {
	const t = translations[currentLang];

	for (let key in t) {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ placeholder
		if (key.endsWith("Placeholder")) {
			const inputId = key.replace("Placeholder", "");
			const inputEl = document.getElementById(inputId);
			if (inputEl) inputEl.setAttribute("placeholder", t[key]);
			continue;
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		const el = document.getElementById(key);
		if (el) el.textContent = t[key];
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º toggleKeysBtn –ø–æ –∫–ª–∞—Å—Å—É
	const toggleBtn = document.getElementById("toggleKeysBtn");
	if (toggleBtn) {
		const isHidden = toggleBtn.classList.contains("hide");
		toggleBtn.textContent = isHidden ? t.toggleKeysBtn : t.hideKeys;
	}
}

langToggleBtn.addEventListener("click", () => {
	currentLang = currentLang === "ua" ? "ru" : "ua";
	getStorageArea().then(storage => storage.set({ selectedLang: currentLang }))
	updateLanguage();
});

function showStatusMessage(message, type = "info") {
	const box = document.getElementById("statusMessage");
	const icon = document.getElementById("statusIcon");
	const text = document.getElementById("statusText");

	text.textContent = message;

	if (type === "error") {
		box.style.backgroundColor = "#f8d7da";
		box.style.color = "#842029";
		box.style.border = "1px solid #f5c2c7";
		icon.textContent = "‚ùå";
	} else {
		box.style.backgroundColor = "#d1e7dd";
		box.style.color = "#0f5132";
		box.style.border = "1px solid #badbcc";
		icon.textContent = "‚úÖ";
	}

	box.style.opacity = "1";
	box.style.display = "block";

	setTimeout(() => {
		box.style.opacity = "0";
		setTimeout(() => {
			box.style.display = "none";
		}, 300); // –ø–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
	}, 5000);
}

function editKey(id) {
  	getStorageArea().then(storage => {
    	storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
      		const current = apiKeys[id];
      		const newName = prompt("–ù–æ–≤–æ–µ –∏–º—è:", current.name);
      		const newKey = prompt("–ù–æ–≤—ã–π API-–∫–ª—é—á:", current.key);
      		if (newName && newKey) {
        		apiKeys[id] = { name: newName, key: newKey };
        		storage.set({ apiKeys }).then(() => renderKeys(apiKeys));
      		}
    	});
  	});
}

function deleteKey(id) {
  	getStorageArea().then(storage => {
    	storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
      		delete apiKeys[id];
      		storage.set({ apiKeys }).then(() => renderKeys(apiKeys));
    	});
  	});
}

function renderKeys(apiKeys = null) {
  	getStorageArea().then(storage => {
    	const list = document.getElementById("keysList");
    	list.innerHTML = "";

    	const showKeys = (data) => {
	      	const keys = apiKeys || data.apiKeys;
	      	for (const [id, { name, key }] of Object.entries(keys)) {
	        	const item = document.createElement("div");
	        	item.className = "key-item";
	        	item.style.display = "flex";
	        	item.style.alignItems = "center";
		        item.style.justifyContent = "space-between";
		        item.style.gap = "12px";

		        const infoBlock = document.createElement("div");
		        infoBlock.innerHTML = `<strong>${name}</strong> <small>(formId ${id})</small><br><span><code>${key.slice(0, 18)}***</code></span>`;

		        const actionsBlock = document.createElement("div");
		        actionsBlock.style.display = "flex";
		        actionsBlock.style.gap = "6px";

		        const editBtn = document.createElement("button");
		        editBtn.className = "btn btn-outline-secondary editBtn";
		        editBtn.title = translations[currentLang].edit;
		        editBtn.innerHTML = `<i class="fa fa-pen"></i>`;
		        editBtn.onclick = () => editKey(id);

		        const deleteBtn = document.createElement("button");
		        deleteBtn.className = "btn btn-outline-danger deleteBtn";
		        deleteBtn.title = translations[currentLang].delete;
		        deleteBtn.innerHTML = `<i class="fa fa-trash"></i>`;
		        deleteBtn.onclick = () => deleteKey(id);

		        actionsBlock.appendChild(editBtn);
		        actionsBlock.appendChild(deleteBtn);
		        item.appendChild(infoBlock);
		        item.appendChild(actionsBlock);
		        list.appendChild(item);
	      	}
    	};

	    if (apiKeys) showKeys({ apiKeys });
	    else storage.get({ apiKeys: {} }).then(showKeys);
  	});
}

document.addEventListener("DOMContentLoaded", () => {
	getStorageArea().then(storage => {
		storage.get(["selectedLang", "theme"], (result) => {
			currentLang = result.selectedLang || (navigator.language.startsWith("uk") ? "ua" : "ru");
			if (result.theme === "dark") document.body.classList.add("dark-theme");
			updateLanguage();
		});
	});

	const formIdEl = document.getElementById("formId");
  	const apiKeyEl = document.getElementById("apiKey");
  	const keyNameEl = document.getElementById("keyName");

	let apiKeyTimer = null;

	apiKeyEl.addEventListener("input", () => {
		clearTimeout(apiKeyTimer);
		const apiKey = apiKeyEl.value.trim();
		if (apiKey.length === 0) {
			apiKeyEl.classList.remove("is-invalid");
		} else if (apiKey.length < 100) {
			apiKeyEl.classList.add("is-invalid");
			return;
		} // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

		apiKeyTimer = setTimeout(async () => {
			const formId = await extractFormInfo(apiKey);
			if (formId) {
				formIdEl.value = formId;
				apiKeyEl.classList.remove("is-invalid");
				apiKeyEl.classList.add("is-valid");
				updateSaveButtonState();
				keyNameEl.focus();
			} else {
				formIdEl.value = "";
				updateSaveButtonState();
			}
		}, 600); // –∑–∞–¥–µ—Ä–∂–∫–∞ 600 –º—Å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
	});

	async function extractFormInfo(apiKey) {
		try {
			const response = await fetch("https://kompikok.salesdrive.me/api/order/list/?limit=1", {
				method: "GET",
				headers: {
					"Form-Api-Key": apiKey
				}
			});

			if (!response.ok) throw new Error(translations[currentLang].invalidKey);

			const linkHeader = response.headers.get("Link");
			if (!linkHeader) throw new Error(translations[currentLang].invalidKey);

			const matchFormId = linkHeader.match(/formId=([^&]+)/);
			return matchFormId?.[1] || null;
		} catch (e) {
			showStatusMessage(`${translations[currentLang].errWhileExtractKey}: ${e.message}`, "error")
			return null;
		}
	}

	function updateSaveButtonState() {
		const formIdFilled = formIdEl.value.trim() !== "";
		const keyNameFilled = (keyNameEl.value.trim() !== "" && keyNameEl.value.trim().length > 2);
		saveBtn.disabled = !(formIdFilled && keyNameFilled);
	}

	keyNameEl.addEventListener("input", () => {
		const keyName = keyNameEl.value.trim();
		if (keyName.length < 3) {
			updateSaveButtonState();
			keyNameEl.classList.add("is-invalid");
		} else {
			updateSaveButtonState();
			keyNameEl.classList.replace("is-invalid", "is-valid");
		}
	});

	const toggleBtn = document.getElementById("toggleKeysBtn");
	const keysList = document.getElementById("keysList");

	toggleBtn.addEventListener("click", () => {
		const isVisible = keysList.style.maxHeight !== "0px";

		if (isVisible) {
			keysList.style.maxHeight = "0px";
			keysList.style.opacity = "0";
			toggleBtn.textContent = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨á";
			toggleBtn.classList.replace("show", "hide");
		} else {
			const scrollHeight = keysList.scrollHeight;
			keysList.style.maxHeight = scrollHeight + "px";
			keysList.style.opacity = "1";
			toggleBtn.textContent = "–°–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚¨Ü";
			toggleBtn.classList.replace("hide", "show");
		}

		const isHidden = toggleBtn.classList.contains("hide");

		toggleBtn.classList.toggle("hide");
		toggleBtn.classList.toggle("show");

		toggleBtn.textContent = !isHidden
			? translations[currentLang].hideKeys
			: translations[currentLang].toggleKeysBtn;

		keysList.classList.toggle("open");
	});

	langToggleBtn.addEventListener("click", () => {
		let editBtns = document.querySelectorAll(".editBtn");
		editBtns.forEach(editBtn => editBtn.title = translations[currentLang].edit);
		let deleteBtns = document.querySelectorAll(".deleteBtn");
		deleteBtns.forEach(deleteBtn => deleteBtn.title = translations[currentLang].delete);
	});

	const saveBtn = document.getElementById("saveBtn")
	saveBtn.addEventListener("click", () => {
    	const formId = formIdEl.value.trim();
    	const apiKey = apiKeyEl.value.trim();
    	const keyName = keyNameEl.value.trim();

    	if (!formId || !apiKey || !keyName) return;

    	getStorageArea().then(storage => {
	      	storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
	        	apiKeys[formId] = { name: keyName, key: apiKey };
	        	storage.set({ apiKeys }).then(() => {
	          		formIdEl.value = "";
	          		apiKeyEl.value = "";
	          		keyNameEl.value = "";
	          		renderKeys(apiKeys);
	        	});
	      	});
	    });

		showStatusMessage(translations[currentLang].succKeySaved, "success")
		apiKeyEl.focus();
  	});

	keyNameEl.addEventListener("keydown", (e) => {
		if (e.key === "Enter" && !saveBtn.disabled) {
			e.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
			saveBtn.click();    // –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
		}
	});

	document.getElementById("clearAllBtn").addEventListener("click", () => {
  		if (!confirm(translations[currentLang].removeAllApiKeys)) return;
    	getStorageArea().then(storage => storage.set({ apiKeys: {} }).then(() => renderKeys({})));
		showStatusMessage(translations[currentLang].allKeysCleared, "success")
  	});

  	document.getElementById("exportBtn").addEventListener("click", () => {
    	getStorageArea().then(storage => {
      		storage.get({ apiKeys: {} }).then(({ apiKeys }) => {
		        const blob = new Blob([JSON.stringify(apiKeys, null, 2)], { type: "application/json" });
		        const url = URL.createObjectURL(blob);
		        const a = document.createElement("a");
		        a.href = url;
		        a.download = "apiKeys.json";
		        a.click();
		        URL.revokeObjectURL(url);
      		});
    	});
  	});

  	document.getElementById("importBtn").addEventListener("click", () => {
		hiddenFileInput.click();
  	});

	hiddenFileInput.addEventListener('change', (event) => {
		const file = event.target.files[0];
		if (!file) return;

		const reader = new FileReader();
		reader.onload = (e) => {
			try {
				const parsed = JSON.parse(e.target.result);
				showPreview(parsed); // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', err);
				// –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			}
		};
		reader.readAsText(file);
	});

	renderKeys();

  	let previewData = null;

	function showPreview(importedKeys) {
	  	getStorageArea().then(storage => {
	    	storage.get({ apiKeys: {} }).then(({ apiKeys: existingKeys }) => {
	      		const container = document.getElementById("previewContainer");
	      		const list = document.getElementById("previewList");
	      		list.innerHTML = "";

	      		previewData = { importedKeys, existingKeys };

	      		for (const [id, { name, key }] of Object.entries(importedKeys)) {
	        		const exists = existingKeys[id];
	        		const isSame = exists && exists.key === key && exists.name === name;

			        const label = exists
			          	? isSame
			            	? "(—É–∂–µ –µ—Å—Ç—å)"
			            	: "(–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ)"
			          	: "(–Ω–æ–≤—ã–π)";

			        const row = document.createElement("div");
			        row.style.display = "flex";
			        row.style.alignItems = "left";
			        row.style.marginBottom = "6px";
			        row.style.gap = "8px";
					row.className = "form-check form-switch";

			        const checkbox = document.createElement("input");
			        checkbox.type = "checkbox";
					checkbox.className = "form-check-input";
					checkbox.role="switch"
			        checkbox.checked = true;
			        checkbox.dataset.id = id;

			        const text = document.createElement("div");
			        text.innerHTML = `<strong>${name}</strong> <small>(formId ${id})</small>:<br /> <code>${key.slice(0, 18)}</code> <span style="color:gray;">${label}</span>`;

			        row.appendChild(checkbox);
			        row.appendChild(text);
			        list.appendChild(row);
	      		}

	      		container.style.display = "block";
	    	});
	  	});
	}

	document.getElementById("confirmImportBtn").addEventListener("click", () => {
	  	if (!previewData) return;

	  	const { importedKeys, existingKeys } = previewData;
	  	const selected = {};

	  	document.querySelectorAll("#previewList input[type=checkbox]").forEach(cb => {
	    	if (cb.checked) {
	      		const id = cb.dataset.id;
	      		selected[id] = importedKeys[id];
	    	}
	  	});

	  	const merged = { ...existingKeys, ...selected };

	  	getStorageArea().then(storage => {
	    	storage.set({ apiKeys: merged }).then(() => {
	      		renderKeys(merged);
	      		document.getElementById("previewContainer").style.display = "none";
	      		previewData = null;
	      		showStatusMessage(translations[currentLang].importedKeysSaved, "info");
	    	});
	  	});
	});

	document.getElementById("selectAllBtn").addEventListener("click", () => {
	  	document.querySelectorAll("#previewList input[type=checkbox]").forEach(cb => cb.checked = true);
	});

	document.getElementById("deselectAllBtn").addEventListener("click", () => {
	  	document.querySelectorAll("#previewList input[type=checkbox]").forEach(cb => cb.checked = false);
	});

	document.getElementById("cancelImportBtn").addEventListener("click", () => {
	  	document.getElementById("previewContainer").style.display = "none";
	  	previewData = null;
	});
});
